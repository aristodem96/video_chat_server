const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const cors = require("cors");

const app = express();
app.use(cors());

const server = http.createServer(app);
const io = new Server(server, {
  cors: { origin: "*" },
});

// –•—Ä–∞–Ω–∏–º –∫–æ–º–Ω–∞—Ç—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let rooms = {};  

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
const generateRoomId = () => Math.random().toString(36).substring(7);

io.on("connection", (socket) => {
  console.log(`User connected: ${socket.id}`);

  // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  let assignedRoom = null;
  for (const roomId in rooms) {
    if (rooms[roomId].length < 2) {
      assignedRoom = roomId;  // –ï—Å–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ –µ—Å—Ç—å –º–µ—Å—Ç–æ, –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      break;
    }
  }

  // –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
  if (!assignedRoom) {
    assignedRoom = generateRoomId();
    rooms[assignedRoom] = [];
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
  rooms[assignedRoom].push(socket.id);
  socket.join(assignedRoom);
  console.log(`User ${socket.id} assigned to room ${assignedRoom}`);

  // –ï—Å–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ 2 —á–µ–ª–æ–≤–µ–∫–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  if (rooms[assignedRoom].length === 2) {
    io.to(rooms[assignedRoom][0]).emit("peer-connected", { peerId: rooms[assignedRoom][1] });
    io.to(rooms[assignedRoom][1]).emit("peer-connected", { peerId: rooms[assignedRoom][0] });
    console.log(`Room ${assignedRoom} is ready for call`);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∑–≤–æ–Ω–æ–∫
  socket.on("offer", ({ offer, recipientId }) => {
    io.to(recipientId).emit("offer", { offer, senderId: socket.id });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
  socket.on("answer", ({ answer, recipientId }) => {
    io.to(recipientId).emit("answer", { answer });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  socket.on("ice-candidate", ({ candidate, recipientId }) => {
    io.to(recipientId).emit("ice-candidate", { candidate });
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
  socket.on("disconnect", () => {
    console.log(`User disconnected: ${socket.id}`);
    // –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
    for (const roomId in rooms) {
      rooms[roomId] = rooms[roomId].filter((id) => id !== socket.id);
      if (rooms[roomId].length === 0) {
        delete rooms[roomId];  // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–æ–º–Ω–∞—Ç—É
      }
    }
  });
});

const PORT = process.env.PORT || 5001;
const HOST = process.env.HOST || "0.0.0.0"; 

server.listen(PORT, HOST, () => {
  console.log(`üöÄ Server running on http://${HOST}:${PORT}`);
});
